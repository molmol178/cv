/*
 * filename : memlib.h
 * author   : Takahiro Sugiyama
 * date     : 1993/09/13
 */



#ifndef __memlib_h
#define __memlib_h



#include "comacros.h"



/*=====================================================*
 * MEMLIB_ERROR : メモリが確保できなかったとき終了する
 *=====================================================*/
extern long MEMLIB_ERROR; /* デフォルト：１（終了する） */



/*********************
 * メモリに関する操作
 *********************/

/*=============================*
 * memnew : メモリを確保する。
 *=============================*/
char *memnew /* ポインタ */
  P1 (( long, size )) /* バイト数 */



/*==============================*
 * memfree : メモリを開放する。
 *==============================*/
void memfree
  P1 (( char *, ptr )) /* ポインタ */



/*=================================*
 * memrenew : メモリを再確保する。
 *=================================*/
char *memrenew /* ポインタ */
  P2 (( char *, ptr  ), /* ポインタ */
      ( long  , size )) /* バイト数 */



/*================================*
 * memcopy : メモリをコピーする。
 *================================*/
void memcopy
  P3 (( char *, dest ), /* ポインタ */
      ( char *, src  ), /* ポインタ */
      ( long  , size )) /* バイト数 */



/*============================*
 * memfill : メモリを埋める。
 *============================*/
void memfill
  P3 (( char *, dest ), /* ポインタ   */
      ( long  , c    ), /* 埋める文字 */
      ( long  , size )) /* バイト数   */



/*************************
 * 一次元配列に関する操作
 *************************/

/*=========================================*
 * memnew1 : 一次元配列のメモリを確保する。
 *=========================================*/
char *memnew1 /* 一次元配列のポインタ */
  P2 (( long, num  ), /* 要素数     */
      ( long, size )) /* 要素サイズ */



/*==========================================*
 * memfree1 : 一次元配列のメモリを開放する。
 *==========================================*/
void memfree1
  P1 (( char *, ptr )) /* 一次元配列のポインタ */



/*=============================================*
 * memrenew1 : 一次元配列のメモリを再確保する。
 *=============================================*/
char *memrenew1 /* 一次元配列のポインタ */
  P3 (( char *, ptr ), /* 一次元配列のポインタ */
      ( long  , num ), /* 要素数               */
      ( long  , size)) /* 要素サイズ           */



/*============================================*
 * memcopy1 : 一次元配列のメモリをコピーする。
 *============================================*/
void memcopy1
  P4 (( char *, dest ), /* 一次元配列のポインタ */
      ( char *, src  ), /* 一次元配列のポインタ */
      ( long  , num  ), /* 要素数               */
      ( long  , size )) /* 要素サイズ           */



/*==============================================*
 * memfill1 : 一次元配列のメモリの内容を埋める。
 *==============================================*/
void memfill1
  P4 (( char *, dest ), /* 一次元配列のポインタ */
      ( long  , c    ), /* 埋める文字           */
      ( long  , num  ), /* 要素数               */
      ( long  , size )) /* 要素サイズ           */



/*************************
 * 二次元配列に関する操作
 *************************/

/*=========================================*
 * memnew2 : 二次元配列のメモリを確保する。
 *=========================================*/
char **memnew2 /* 二次元配列のポインタ */
  P3 (( long, xnum ), /* Ｘの要素数 */
      ( long, ynum ), /* Ｙの要素数 */
      ( long, size )) /* 要素サイズ */



/*==========================================*
 * memfree2 : 二次元配列のメモリを開放する。
 *==========================================*/
void memfree2
  P1 (( char **, ptr )) /* 二次元配列のポインタ */



/*============================================*
 * memcopy2 : 二次元配列のメモリをコピーする。
 *============================================*/
void memcopy2
  P5 (( char **, dest ), /* 二次元配列のポインタ */
      ( char **, src  ), /* 二次元配列のポインタ */
      ( long   , xnum ), /* Ｘの要素数           */
      ( long   , ynum ), /* Ｙの要素数           */
      ( long   , size )) /* 要素サイズ           */



/*========================================*
 * memfill2 : 二次元配列のメモリを埋める。
 *========================================*/
void memfill2
  P5 (( char **, dest ), /* 二次元配列のポインタ */
      ( long   , c    ), /* 埋める文字           */
      ( long   , xnum ), /* Ｘの要素数           */
      ( long   , ynum ), /* Ｙの要素数           */
      ( long   , size )) /* 要素サイズ           */



/*************************
 * 三次元配列に関する操作
 *************************/

/*=========================================*
 * memnew3 : 三次元配列のメモリを確保する。
 *=========================================*/
char ***memnew3 /* 三次元配列のポインタ */
  P4 (( long, xnum ), /* Ｘの要素数 */
      ( long, ynum ), /* Ｙの要素数 */
      ( long, znum ), /* Ｚの要素数 */
      ( long, size )) /* 要素サイズ */



/*==========================================*
 * memfree3 : 三次元配列のメモリを開放する。
 *==========================================*/
void memfree3
  P1 (( char ***, ptr )) /* 三次元配列のポインタ */



/*============================================*
 * memcopy3 : 三次元配列のメモリをコピーする。
 *============================================*/
void memcopy3
  P6 (( char ***, dest ), /* 三次元配列のポインタ */
      ( char ***, src  ), /* 三次元配列のポインタ */
      ( long    , xnum ), /* Ｘの要素数           */
      ( long    , ynum ), /* Ｙの要素数           */
      ( long    , znum ), /* Ｚの要素数           */
      ( long    , size )) /* 要素サイズ           */



/*========================================*
 * memfill3 : 三次元配列のメモリを埋める。
 *========================================*/
void memfill3
  P6 (( char ***, dest ), /* 二次元配列のポインタ */
      ( long    , c    ), /* 埋める文字           */
      ( long    , xnum ), /* Ｘの要素数           */
      ( long    , ynum ), /* Ｙの要素数           */
      ( long    , znum ), /* Ｚの要素数           */
      ( long    , size )) /* 要素サイズ           */



/*****************
 * 配列操作マクロ
 *****************/

/*====================================*
 * typenew   : 型の領域を確保する。
 * typerenew : 型の領域を再確保する。
 * typefree  : 型の領域を開放する。
 *====================================*/
#define typenew( type ) ( type * )memnew( sizeof( type ) )
#define typerenew( ptr, type ) ( type * )memrenew( ( char * )ptr, sizeof( type ))
#define typefree( ptr ) memfree( ( char * )ptr )



/*==============================================*
 * typenew1   : 一次元配列を型指定で確保する。
 * typerenew1 : 一次元配列を型指定で再確保する。
 * typefree1  : 一次元配列を解放する。
 *==============================================*/
#define typenew1( x, type ) ( type * )memnew1( x, sizeof( type ))
#define typerenew1( ptr, x, type ) ( type * )memrenew1( ( char * )ptr, x, sizeof( type ))
#define typefree1( ptr ) memfree1( ( char * )ptr )



/*============================================*
 * typenew2  : 二次元配列を型指定で確保する。
 * typefree2 : 二次元配列を解放する。
 *============================================*/
#define typenew2( x, y, type ) ( type ** )memnew2( x, y, sizeof( type ))
#define typefree2( ptr ) memfree2( ( char ** )ptr )



/*============================================*
 * typenew3  : 三次元配列を型指定で確保する。
 * typefree3 : 三次元配列を解放する。
 *============================================*/
#define typenew3( x, y, z, type ) ( type *** )memnew3( x, y, z, sizeof( type ))
#define typefree3( ptr ) memfree3( ( char *** )ptr )







#endif  //__memlib_h
