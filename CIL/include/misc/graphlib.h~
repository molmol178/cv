/*
 * filename : graphlib.h
 * author   : Takahiro Sugiyama
 * date     : Wednesday, June 1 1994
 * describe : Graph Structure Library
 */



#ifndef __graphlib_h
#define __graphlib_h



#include "comacros.h"



/*========================*
 * グラフ構造体のポインタ
 *========================*/
typedef struct _graphRec *t_graph;

/*========================*
 * ノード構造体のポインタ
 *========================*/
typedef struct _nodeRec *t_node;

/*========================*
 * エッジ構造体のポインタ
 *========================*/
typedef struct _edgeRec *t_edge;



/*=========================================================*
 * t_graph : ノードとエッジの集合をグラフとして定義する。
 *=========================================================*/
typedef struct _graphRec {
  long    node_data_size; /* ノードのデータのサイズ */
  long    edge_data_size; /* エッジのデータのサイズ */

  /* implement */
  long    node_capacity;  /* ノードリストの容量 */
  long    node_num;       /* ノードの数 */
  t_node *node_list;      /* ノードのリスト */

  /* implement */
  long    edge_capacity;  /* エッジリストの容量 */
  long    edge_num;       /* エッジの数 */
  t_edge *edge_list;      /* エッジのリスト */
} t_graphRec;



/*------------------*
 * 隣接構造体の宣言
 *------------------*/
typedef struct _neighborRec {
  /* implement */
  t_node node;  /* ノード */
  t_edge edge; /* エッジ */
} t_neighbor;

/*=================================================================*
 * t_node : 自分に隣接しているノードとエッジの集合として定義する。
 *=================================================================*/
typedef struct _nodeRec {
  char   *data; /* ユーザデータのポインタ */
  long    key;  /* 参照キー */

  /* implement */
  long        neighbor_capacity; /* 隣接リストの容量 */
  long        neighbor_num;      /* 隣接の数 */
  t_neighbor *neighbor_list;     /* 隣接のリスト */
} t_nodeRec;



/*============================================================*
 * t_edge : 自分に隣接している双方向のノードとして定義する。
 *============================================================*/
typedef struct _edgeRec {
  char   *data;  /* ユーザデータのポインタ */

  /* implement */
  t_node  node1; /* 隣接ノード１ */
  t_node  node2; /* 隣接ノード２ */
} t_edgeRec;



/*========================*
 * グラフ属性参照マクロ群
 *========================*/
#define GRAPH__EDGE(obj,index) (obj)->edge_list[index]
#define GRAPH__NODE(obj,index) (obj)->node_list[index]

#define GRAPH__EDGE_NUM(obj)  (obj)->edge_num
#define GRAPH__EDGE_LIST(obj) (obj)->edge_list
#define GRAPH__NODE_NUM(obj)  (obj)->node_num
#define GRAPH__NODE_LIST(obj) (obj)->node_list

/*==========================================*
 * graph__create : グラフを新しく作成する。
 *==========================================*/
t_graph graph__create /* グラフを返す */
  P2 (( long, node_data_size ), /* ノードのユーザデータのサイズ */
      ( long, edge_data_size )) /* エッジのユーザデータのサイズ */

/*=========================================================*
 * graph__destroy : グラフを破壊する。ノードも破壊される。
 *=========================================================*/
void graph__destroy
  P1 (( t_graph, self )) /* グラフ */

/*======================================================*
 * graph__free : グラフを解放する。ノードも破壊される。
 *======================================================*/
void graph__free
  P1 (( t_graph, self )) /* グラフ */

/*======================================*
 * graph__node : グラフのノードを返す。
 *======================================*/
t_node graph__node /* ノードを返す */
  P2 (( t_graph, self  ), /* グラフ */
      ( long   , index )) /* インデックス */

/*======================================*
 * graph__edge : グラフのエッジを返す。
 *======================================*/
t_edge graph__edge /* エッジを返す */
  P2 (( t_graph, self  ), /* グラフ */
      ( long   , index )) /* インデックス */

/*==============================================*
 * graph__node_num : グラフのノードの数を返す。
 *==============================================*/
long graph__node_num /* ノード数を返す */
  P1 (( t_graph, self )) /* グラフ */

/*===================================================*
 * graph__node_list : グラフのノードのリストを返す。
 *===================================================*/
t_node *graph__node_list /* ノードリストを返す */
  P1 (( t_graph, self )) /* グラフ */

/*==============================================*
 * graph__edge_num : グラフのエッジの数を返す。
 *==============================================*/
long graph__edge_num /* エッジ数を返す */
  P1 (( t_graph, self )) /* グラフ */

/*===================================================*
 * graph__edge_list : グラフのエッジのリストを返す。
 *===================================================*/
t_edge *graph__edge_list /* エッジリストを返す */
  P1 (( t_graph, self )) /* グラフ */

/*================================================*
 * graph__add_node : グラフにノードを付け加える。
 *================================================*/
void graph__add_node
  P2 (( t_graph, self ), /* グラフ */
      ( t_node , node )) /* ノード */

/*================================================*
 * graph__add_edge : グラフにエッジを付け加える。
 *================================================*/
void graph__add_edge
  P2 (( t_graph, self ), /* グラフ */
      ( t_edge , edge )) /* エッジ */

/*==============================================================*
 * graph__del_node : グラフのノードリストからノードを削除する。
 *==============================================================*/
void graph__del_node
  P2 (( t_graph, self ), /* グラフ */
      ( t_node , node )) /* ノード */

/*==============================================================*
 * graph__del_edge : グラフのエッジリストからエッジを削除する。
 *==============================================================*/
void graph__del_edge
  P2 (( t_graph, self ), /* グラフ */
      ( t_edge , edge )) /* エッジ */

/*==================================================*
 * graph__bind_nodes : グラフのノード間を接続する。
 *==================================================*/
t_edge graph__bind_nodes /* エッジを返す */
  P3 (( t_graph, self  ), /* グラフ */
      ( t_node , node1 ), /* ノード１ */
      ( t_node , node2 )) /* ノード２ */

/*=========================================================*
 * graph__key_to_node : ノード参照キーをノードに変換する。
 *=========================================================*/
t_node graph__key_to_node /* ノードを返す */
  P2 (( t_graph, self ), /* グラフ */
      ( long   , key  )) /* 参照キー */

/*==================================================================*
 * graph__key_bind_nodes : グラフのノード間をキーを使って接続する。
 *==================================================================*/
t_edge graph__key_bind_nodes /* エッジを返す */
  P3 (( t_graph, self ), /* グラフ */
      ( long   , key1 ), /* 参照キー１ */
      ( long   , key2 )) /* 参照キー２ */

/*========================================================================*
 * graph__keys_to_edge : グラフのノードの接続しているエッジをキーで返す。
 *========================================================================*/
t_edge graph__keys_to_edge /* エッジを返す */
  P3 (( t_graph, self ), /* グラフ */
      ( long   , key1 ), /* 参照キー１ */
      ( long   , key2 )) /* 参照キー２ */

/*===================================================================*
 * graph__nodes_to_edge : グラフのノードの接続しているエッジを返す。
 *===================================================================*/
t_edge graph__nodes_to_edge /* エッジを返す */
  P3 (( t_graph, self  ), /* グラフ */
      ( t_node , node1 ), /* ノード１ */
      ( t_node , node2 )) /* ノード２ */



/*================================*
 * ノードの属性を参照するマクロ群
 *================================*/
#define NODE__DATA(node,type)      (type)((node)->data)
#define NODE__KEY(node)            (node)->key
#define NODE__NEIGHBOR(node,index) NODE__NEIGHBOR_LIST(node)[index]
#define NODE__nNODE(node,index)    NODE__NEIGHBOR(node,index).node
#define NODE__nEDGE(node,index)    NODE__NEIGHBOR(node,index).edge

#define NODE__NEIGHBOR_LIST(node)  (node)->neighbor_list
#define NODE__NEIGHBOR_NUM(node)   (node)->neighbor_num

/*=========================================*
 * node__create : ノードを新しく作成する。
 *=========================================*/
t_node node__create /* ノードを返す */
  P2 (( long  , key  ), /* ノード参照キー */
      ( char *, data )) /* ユーザデータ */

/*=======================================================*
 * node__destroy : ノードを解放する。エッジは解放される。
 *=======================================================*/
void node__destroy
  P1 (( t_node, self )) /* ノード */

/*=====================================================*
 * node__free : ノードを解放する。エッジは解放される。
 *=====================================================*/
void node__free
  P1 (( t_node, self )) /* ノード */

/*===========================================*
 * node__data : ノードのユーザデータを返す。
 *===========================================*/
char *node__data /* ユーザデータを返す */
  P1 (( t_node, self )) /* ノード */

/*======================================*
 * node__key : ノードの参照キーを返す。
 *======================================*/
long node__key /* 参照キーを返す */
  P1 (( t_node, self ))  /* ノード */

/*==========================================*
 * node__neighbor_node : 隣接ノードを返す。
 *==========================================*/
t_node node__neighbor_node  /* ノードを返す */
  P2 (( t_node, self  ), /* ノード */
      ( long  , index )) /* インデックス */

/*==================================================*
 * node__neighbor_edge : 隣接ノードのエッジを返す。
 *==================================================*/
t_edge node__neighbor_edge /* エッジを返す */
  P2 (( t_node, self  ), /* ノード */
      ( long  , index )) /* インデックス */

/*=============================================*
 * node__neighbor : 隣接構造のポインタを返す。
 *=============================================*/
t_neighbor *node__neighbor /* ポインタを返す */
  P2 (( t_node, self  ), /* ノード */
      ( long  , index )) /* インデックス */

/*=====================================================*
 * node__neighbor_num : 隣接しているノードの数を返す。
 *=====================================================*/
long node__neighbor_num /* ノード数を返す */
  P1 (( t_node, self )) /* ノード */

/*==================================================*
 * node__neighbor_list : 隣接しているリストを返す。
 *==================================================*/
t_neighbor *node__neighbor_list /* 隣接リストを返す */
  P1 (( t_node, self )) /* ノード */

/*=========================================*
 * node__add_node : 隣接ノードを追加する。
 *=========================================*/
t_edge node__add_node /* エッジを返す */
  P2 (( t_node, self ), /* ノード */
      ( t_node, node )) /* 隣接ノード */

/*===================================================*
 * node__set_data : ユーザデータを新しくセットする。
 *===================================================*/
char *node__set_data /* 古いユーザデータを返す */
  P2 (( t_node, self ), /* ノード */
      ( char *, data )) /* ユーザデータ */

/*==============================================*
 * node__set_key : ノードの参照キーを変更する。
 *==============================================*/
long node__set_key /* 古い参照キーを返す */
  P2 (( t_node, self ), /* ノード */
      ( long  , key  )) /* 新しい参照キー */

/*===========================================================*
 * node__del_node : 隣接しているノードをリストから削除する。
 *===========================================================*/
long node__del_node /* 削除されたら１そうでなければ０ */
  P2 (( t_node, self ), /* ノード */
      ( t_node, node )) /* 削除したいノード */

/*========================================================================*
 * node__key_del_node : 参照キーで隣接しているノードをリストから削除する。
 *========================================================================*/
long node__key_del_node /* 削除されたら１そうでなければ０ */
  P2 (( t_node, self ), /* ノード */
      ( long  , key  )) /* 削除したい参照キー */

/*==============================================================*
 * node__key_to_node : 隣接している参照キーをノードに変換する。
 *==============================================================*/
t_node node__key_to_node /* ノードを返す */
  P2 (( t_node, self ), /* ノード */
      ( long  , key  )) /* 参照キー */

/*==============================================================*
 * node__key_to_edge : 隣接している参照キーをエッジに変換する。
 *==============================================================*/
t_edge node__key_to_edge /* エッジを返す */
  P2 (( t_node, self ), /* ノード */
      ( long  , key  )) /* 参照キー */

/*====================================================================*
 * node__key_to_neighbor : 隣接している参照キーを隣接構造に変換する。
 *====================================================================*/
t_neighbor *node__key_to_neighbor  /* 隣接構造のポインタ */
  P2 (( t_node, self ), /* ノード */
      ( long  , key  )) /* 参照キー */



/*======================*
 * エッジの属性を返す。
 *======================*/
#define EDGE__DATA(edge,type) (type)((edge)->data)
#define EDGE__NODE1(edge)     (edge)->node1
#define EDGE__NODE2(edge)     (edge)->node2

/*===================================================================*
 * edge__create : エッジを新しく作成する。ノードの内容も書き変わる。
 *===================================================================*/
t_edge edge__create /* エッジを返す */
  P3 (( t_node, node1 ), /* 隣接ノード１ */
      ( t_node, node2 ), /* 隣接ノード２ */
      ( char *, data  )) /* エッジ属性   */

/*=========================================================*
 * edge__destroy : エッジを破壊する。隣接ノードも変化する。
 *=========================================================*/
void edge__destroy
  P1 (( t_edge, self )) /* エッジ */

/*=======================================================*
 * edge__free : エッジを解放する。隣接ノードも変化する。
 *=======================================================*/
void edge__free
  P1 (( t_edge, self )) /* エッジ */

/*====================================*
 * edge__node1 : 隣接ノード１を返す。
 *====================================*/
t_node edge__node1 /* 隣接ノード１を返す */
  P1 (( t_edge, self )) /* エッジ */

/*====================================*
 * edge__node2 : 隣接ノード２を返す。
 *====================================*/
t_node edge__node2 /* 隣接ノード２を返す */
  P1 (( t_edge, self )) /* エッジ */

/*===========================================*
 * edge__data : エッジのユーザデータを返す。
 *===========================================*/
char *edge__data
  P1 (( t_edge, self )) /* エッジ */

/*=====================================================================*
 * edge__set_node : 隣接ノードを変更する。隣接ノードの内容は変化する。
 *=====================================================================*/
void edge__set_node
  P3 (( t_edge, self  ), /* エッジ */
      ( t_node, node1 ), /* 新しいノード１ */
      ( t_node, node2 )) /* 新しいノード２ */

/*=============================================*
 * edge__set_data : エッジのデータを変更する。
 *=============================================*/
char *edge__set_data /* 前のデータを返す */
  P2 (( t_edge, self ), /* エッジ */
      ( char *, data )) /* 新しい属性 */



/*--------------------------------------------------------------*
 * f_edge__data_free : エッジのユーザデータを解放する関数の定義
 *--------------------------------------------------------------*/
typedef void f_edge__data_free
  P1 (( char *, data ))

/*======================================================================*
 * edge__set_data_free : エッジのユーザデータを解放する関数を設定する。
 *======================================================================*/
f_edge__data_free edge__set_data_free
  P1 (( f_edge__data_free, func ))



/*--------------------------------------------------------------*
 * f_node__data_free : ノードのユーザデータを解放する関数の定義
 *--------------------------------------------------------------*/
typedef void f_node__data_free
  P1 (( char *, data ))

/*======================================================================*
 * node__set_data_free : ノードのユーザデータを解放する関数を設定する。
 *======================================================================*/
f_node__data_free node__set_data_free
  P1 (( f_node__data_free, func ))



#endif  __graphlib_h
